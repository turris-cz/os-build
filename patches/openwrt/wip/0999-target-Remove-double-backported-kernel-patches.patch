From 54c16e8cceff785e5aadf782d64feb95d518a7e4 Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <michal.hrusecky@turris.com>
Date: Wed, 6 Mar 2024 10:19:36 +0100
Subject: [PATCH 1/2] target: Remove double backported kernel patches

---
 ...2-mac-add-support-for-more-10G-modes.patch |  34 -----
 ...a-support-HW-controlled-mode-via-pri.patch | 118 ------------------
 ...a-initialize-multi-intensity-to-full.patch |  33 -----
 3 files changed, 185 deletions(-)
 delete mode 100644 target/linux/generic/backport-5.15/792-v5.16-net-dpaa2-mac-add-support-for-more-10G-modes.patch
 delete mode 100644 target/linux/mvebu/patches-5.15/102-leds-turris-omnia-support-HW-controlled-mode-via-pri.patch
 delete mode 100644 target/linux/mvebu/patches-5.15/103-leds-turris-omnia-initialize-multi-intensity-to-full.patch

diff --git a/target/linux/generic/backport-5.15/792-v5.16-net-dpaa2-mac-add-support-for-more-10G-modes.patch b/target/linux/generic/backport-5.15/792-v5.16-net-dpaa2-mac-add-support-for-more-10G-modes.patch
deleted file mode 100644
index 0bd96f1f4f..0000000000
--- a/target/linux/generic/backport-5.15/792-v5.16-net-dpaa2-mac-add-support-for-more-10G-modes.patch
+++ /dev/null
@@ -1,34 +0,0 @@
-From c314138bd045e050432158ab021160de3ba51c5e Mon Sep 17 00:00:00 2001
-From: Russell King <rmk+kernel@armlinux.org.uk>
-Date: Thu, 30 Jan 2020 22:42:38 +0000
-Subject: [PATCH 2/4] net: dpaa2-mac: add support for more 10G modes
-
-Phylink documentation says:
- * Note that the PHY may be able to transform from one connection
- * technology to another, so, eg, don't clear 1000BaseX just
- * because the MAC is unable to BaseX mode. This is more about
- * clearing unsupported speeds and duplex settings. The port modes
- * should not be cleared; phylink_set_port_modes() will help with this.
-
-So add the missing 10G modes.
-
-Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
----
- drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c | 6 ++++++
- 1 file changed, 6 insertions(+)
-
---- a/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
-+++ b/drivers/net/ethernet/freescale/dpaa2/dpaa2-mac.c
-@@ -140,6 +140,12 @@ static void dpaa2_mac_validate(struct ph
- 	case PHY_INTERFACE_MODE_10GBASER:
- 	case PHY_INTERFACE_MODE_USXGMII:
- 		phylink_set(mask, 10000baseT_Full);
-+		phylink_set(mask, 10000baseKR_Full);
-+		phylink_set(mask, 10000baseCR_Full);
-+		phylink_set(mask, 10000baseSR_Full);
-+		phylink_set(mask, 10000baseLR_Full);
-+		phylink_set(mask, 10000baseLRM_Full);
-+		phylink_set(mask, 10000baseER_Full);
- 		if (state->interface == PHY_INTERFACE_MODE_10GBASER)
- 			break;
- 		phylink_set(mask, 5000baseT_Full);
diff --git a/target/linux/mvebu/patches-5.15/102-leds-turris-omnia-support-HW-controlled-mode-via-pri.patch b/target/linux/mvebu/patches-5.15/102-leds-turris-omnia-support-HW-controlled-mode-via-pri.patch
deleted file mode 100644
index ffec312ced..0000000000
--- a/target/linux/mvebu/patches-5.15/102-leds-turris-omnia-support-HW-controlled-mode-via-pri.patch
+++ /dev/null
@@ -1,118 +0,0 @@
-From 80e643510cb14f116f687e992210c0008a09d869 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Marek=20Beh=C3=BAn?= <kabel@kernel.org>
-Date: Mon, 4 Jul 2022 12:59:53 +0200
-Subject: [PATCH] leds: turris-omnia: support HW controlled mode via
- private trigger
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-Add support for enabling MCU controlled mode of the Turris Omnia LEDs
-via a LED private trigger called "omnia-mcu".
-
-When in MCU controlled mode, the user can still set LED color, but the
-blinking is done by MCU, which does different things for various LEDs:
-- WAN LED is blinked according to the LED[0] pin of the WAN PHY
-- LAN LEDs are blinked according to the LED[0] output of corresponding
-  port of the LAN switch
-- PCIe LEDs are blinked according to the logical OR of the MiniPCIe port
-  LED pins
-
-For a long time I wanted to actually do this differently: I wanted to
-make the netdev trigger to transparently offload the blinking to the HW
-if user set compatible settings for the netdev trigger.
-There was some work on this, and hopefully we will be able to complete
-it sometime, but since there are various complications, it will probably
-not be soon.
-
-In the meantime let's support HW controlled mode via this private LED
-trigger. If, in the future, we manage to complete the netdev trigger
-offloading, we can still keep this private trigger for backwards
-compatiblity, if needed.
-
-We also set "omnia-mcu" to cdev->default_trigger, so that the MCU keeps
-control until the user first wants to take over it. If a different
-default trigger is specified in device-tree via the
-`linux,default-trigger` property, LED class will overwrite
-cdev->default_trigger, and so the DT property will be respected.
-
-Signed-off-by: Marek Behún <kabel@kernel.org>
----
- drivers/leds/Kconfig             |  1 +
- drivers/leds/leds-turris-omnia.c | 41 ++++++++++++++++++++++++++++++++
- 2 files changed, 42 insertions(+)
-
---- a/drivers/leds/Kconfig
-+++ b/drivers/leds/Kconfig
-@@ -164,6 +164,7 @@ config LEDS_TURRIS_OMNIA
- 	depends on I2C
- 	depends on MACH_ARMADA_38X || COMPILE_TEST
- 	depends on OF
-+	select LEDS_TRIGGERS
- 	help
- 	  This option enables basic support for the LEDs found on the front
- 	  side of CZ.NIC's Turris Omnia router. There are 12 RGB LEDs on the
---- a/drivers/leds/leds-turris-omnia.c
-+++ b/drivers/leds/leds-turris-omnia.c
-@@ -72,6 +72,39 @@ static int omnia_cmd_read_u8(const struc
- 		return -EIO;
- }
- 
-+static struct led_hw_trigger_type omnia_hw_trigger_type;
-+
-+static int omnia_hwtrig_activate(struct led_classdev *cdev)
-+{
-+	struct omnia_leds *leds = dev_get_drvdata(cdev->dev->parent);
-+	struct omnia_led *led = to_omnia_led(lcdev_to_mccdev(cdev));
-+
-+	/* put the LED into MCU controlled mode */
-+	return i2c_smbus_write_byte_data(leds->client, CMD_LED_MODE,
-+					 CMD_LED_MODE_LED(led->reg));
-+}
-+
-+static void omnia_hwtrig_deactivate(struct led_classdev *cdev)
-+{
-+	struct omnia_leds *leds = dev_get_drvdata(cdev->dev->parent);
-+	struct omnia_led *led = to_omnia_led(lcdev_to_mccdev(cdev));
-+	int ret;
-+
-+	/* put the LED into software mode */
-+	ret = i2c_smbus_write_byte_data(leds->client, CMD_LED_MODE,
-+					CMD_LED_MODE_LED(led->reg) |
-+					CMD_LED_MODE_USER);
-+	if (ret < 0)
-+		dev_err(cdev->dev, "Cannot put to software mode: %i\n", ret);
-+}
-+
-+static struct led_trigger omnia_hw_trigger = {
-+	.name		= "omnia-mcu",
-+	.activate	= omnia_hwtrig_activate,
-+	.deactivate	= omnia_hwtrig_deactivate,
-+	.trigger_type	= &omnia_hw_trigger_type,
-+};
-+
- static int omnia_led_brightness_set_blocking(struct led_classdev *cdev,
- 					     enum led_brightness brightness)
- {
-@@ -143,6 +176,8 @@ static int omnia_led_register(struct i2c
- 	cdev = &led->mc_cdev.led_cdev;
- 	cdev->max_brightness = 255;
- 	cdev->brightness_set_blocking = omnia_led_brightness_set_blocking;
-+	cdev->trigger_type = &omnia_hw_trigger_type;
-+	cdev->default_trigger = omnia_hw_trigger.name;
- 
- 	/* put the LED into software mode */
- 	ret = omnia_cmd_write_u8(client, CMD_LED_MODE,
-@@ -249,6 +284,12 @@ static int omnia_leds_probe(struct i2c_c
- 
- 	mutex_init(&leds->lock);
- 
-+	ret = devm_led_trigger_register(dev, &omnia_hw_trigger);
-+	if (ret < 0) {
-+		dev_err(dev, "Cannot register private LED trigger: %d\n", ret);
-+		return ret;
-+	}
-+
- 	led = &leds->leds[0];
- 	for_each_available_child_of_node(np, child) {
- 		ret = omnia_led_register(client, led, child);
diff --git a/target/linux/mvebu/patches-5.15/103-leds-turris-omnia-initialize-multi-intensity-to-full.patch b/target/linux/mvebu/patches-5.15/103-leds-turris-omnia-initialize-multi-intensity-to-full.patch
deleted file mode 100644
index b6f7da64a7..0000000000
--- a/target/linux/mvebu/patches-5.15/103-leds-turris-omnia-initialize-multi-intensity-to-full.patch
+++ /dev/null
@@ -1,33 +0,0 @@
-From bda176cceb735b9b46c1900658b6486c34e13ae6 Mon Sep 17 00:00:00 2001
-From: =?UTF-8?q?Marek=20Beh=C3=BAn?= <kabel@kernel.org>
-Date: Mon, 4 Jul 2022 12:59:54 +0200
-Subject: [PATCH] leds: turris-omnia: initialize multi-intensity to full
-MIME-Version: 1.0
-Content-Type: text/plain; charset=UTF-8
-Content-Transfer-Encoding: 8bit
-
-The default color of each LED before driver probe (255, 255, 255).
-Initialize multi_intensity to this value, so that it corresponds to the
-reality.
-
-Signed-off-by: Marek Behún <kabel@kernel.org>
----
- drivers/leds/leds-turris-omnia.c | 3 +++
- 1 file changed, 3 insertions(+)
-
---- a/drivers/leds/leds-turris-omnia.c
-+++ b/drivers/leds/leds-turris-omnia.c
-@@ -162,10 +162,13 @@ static int omnia_led_register(struct i2c
- 	}
- 
- 	led->subled_info[0].color_index = LED_COLOR_ID_RED;
-+	led->subled_info[0].intensity = 255;
- 	led->subled_info[0].channel = 0;
- 	led->subled_info[1].color_index = LED_COLOR_ID_GREEN;
-+	led->subled_info[1].intensity = 255;
- 	led->subled_info[1].channel = 1;
- 	led->subled_info[2].color_index = LED_COLOR_ID_BLUE;
-+	led->subled_info[2].intensity = 255;
- 	led->subled_info[2].channel = 2;
- 
- 	led->mc_cdev.subled_info = led->subled_info;
-- 
2.44.0

